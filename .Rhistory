rowwise() %>%
mutate(tte = foo(data = data, s = start, e = end, c = cam) ) %>%
ungroup()
#
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
.[c(1,13,25,37), ] %>%
rowwise() %>%
mutate(tte = foo(data = data, s = start, e = end, c = cam) ) %>%
ungroup()
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
.[c(1,13,25,37), ] %>%
rowwise()
idf
head(which(as.numeric(data$timeLST) %% 3600 == 0))
data[which(as.numeric(data$timeLST) %% 3600 == 0),]
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) )
head(idf)
head(which(idf$start %in% data$timeLST))
head(which(idf$start %in% data$timeLST))
# Create an ideal dataframe
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
rowwise() %>%
mutate(tte = foo(data = data, s = .$start, e = .$end, c = .$cam) ) %>%
ungroup()
foo <- function(data, s, e, c){
# Returns a summarised vector corresponding to a range of dates
# Takes: weather dataframe (must include date column and some covariate column)
#    weathercol = the covariate column in weatherdata you want to summarise
#    fn = what summarise function you want to do (eg. mean, max...) (not in quotes)
#    s & e = the range of dates you want to summarise, should be of class Date
#    c = cam (from dataset row)
out <- data %>%
filter(between(timeLST, s, e),
cam == c) %>%
# Apply fn to weathercol
summarise(new = min(timeLST) ) %>%
#     mutate(new = ifelse(length(.$new) == 0, NA, new)) %>%
# This returns the column as a vector
.$new
return(out)
}
# Create an ideal dataframe
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
rowwise() %>%
mutate(tte = foo(data = data, s = .$start, e = .$end, c = .$cam) ) %>%
ungroup()
#
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) )
head(idf)
head(which(idf$start %in% data$timeLST))
which(!(idf$start %in% data$timeLST))
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
.[, which(idf$start %in% data$timeLST)]
which(idf$start %in% data$timeLST)
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
.[, c(which(idf$start %in% data$timeLST))]
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
.[which(idf$start %in% data$timeLST), ]
head(idf)
dim(idf)
# Create an ideal dataframe
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
.[which(idf$start %in% data$timeLST), ] %>%
rowwise() %>%
mutate(tte = foo(data = data, s = start, e = end, c = cam) )
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
#    .[which(idf$start %in% data$timeLST), ] %>%
.[7:12, ]
idf
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
#    .[which(idf$start %in% data$timeLST), ] %>%
.[7:12, ] %>%
rowwise() %>%
mutate(tte = foo(data = data, s = start, e = end, c = cam) ) %>%
ungroup()
idf
data[data$timeLST == as.POSIXct("2016-02-01 06:00:00")]
data[data$timeLST == as.POSIXct("2016-02-01 06:00:00"),]
data[data$timeLST == as.POSIXct("2016-02-01 06:00:00") & data$cam == "AM174",]
data$timeLST[data$timeLST == as.POSIXct("2016-02-01 06:00:00") & data$cam == "AM174",] <- as.POSIXct("2016-02-01 06:00:04")
data$timeLST[data$timeLST == as.POSIXct("2016-02-01 06:00:00") & data$cam == "AM174",]
data$timeLST[data$timeLST == as.POSIXct("2016-02-01 06:00:00") & data$cam == "AM174"]
data$timeLST[data$timeLST == as.POSIXct("2016-02-01 06:00:00") & data$cam == "AM174"] <- <- as.POSIXct("2016-02-01 06:00:04")
data$timeLST[data$timeLST == as.POSIXct("2016-02-01 06:00:00") & data$cam == "AM174"] <- as.POSIXct("2016-02-01 06:00:04")
head(data)
data$timeLST[data$timeLST == as.POSIXct("2016-02-01 06:00:00") & data$cam == "AM174"]
head(data)
data$timeLST[data$timeLST == as.POSIXct("2016-02-01 06:00:00") & data$cam == "AM174"]
head(data$timeLST)
class(data$timeLST)
data$timeLST[data$timeLST == as.POSIXct("2016-02-01 06:00:00")]
data$timeLST[data$timeLST == as.POSIXct("2016-02-01 06:00:00"),]
head(data[data$timeLST == as.POSIXct("2016-02-01 06:00:00"),] )
head(data)
data$timeLST[1] <- as.POSIXct("2016-02-01 06:00:04")
head(data)
data$timeLST[1] <- as.POSIXct("2016-02-01 6:00:04")
head(data)
data$timeLST[1] <- as.POSIXct("2016-02-01 6:00:04", tz = "GMT")
head(data)
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
#    .[which(idf$start %in% data$timeLST), ] %>%
.[7:12, ] %>%
rowwise() %>%
mutate(tte = foo(data = data, s = start, e = end, c = cam) ) %>%
ungroup()
idf
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
#    .[which(idf$start %in% data$timeLST), ] %>%
#    .[7:12, ] %>%
rowwise() %>%
mutate(tte = foo(data = data, s = start, e = end, c = cam) ) %>%
ungroup()
# Create an ideal dataframe
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
.[7:12, ] %>%
rowwise() %>%
mutate(tte = foo(data = data, s = start, e = end, c = cam) ) %>%
ungroup()
idf
# Create an ideal dataframe
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
.[6:12, ] %>%
rowwise() %>%
mutate(tte = foo(data = data, s = start, e = end, c = cam) ) %>%
ungroup()
idf
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
.[1:12, ] %>%
rowwise() %>%
mutate(tte = foo(data = data, s = start, e = end, c = cam) ) %>%
ungroup()
idf
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
.[1:200, ] %>%
rowwise() %>%
mutate(tte = foo(data = data, s = start, e = end, c = cam) ) %>%
ungroup()
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
.[1:50, ] %>%
rowwise() %>%
mutate(tte = foo(data = data, s = start, e = end, c = cam) ) %>%
ungroup()
# Create an ideal dataframe
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
.[1:30, ] %>%
rowwise() %>%
mutate(tte = foo(data = data, s = start, e = end, c = cam) ) %>%
ungroup()
#
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
.[1:20, ] %>%
rowwise() %>%
mutate(tte = foo(data = data, s = start, e = end, c = cam) ) %>%
ungroup()
#
# Create an ideal dataframe
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
.[1:12, ] %>%
rowwise() %>%
mutate(tte = foo(data = data, s = start, e = end, c = cam) ) %>%
ungroup()
#
idf
# Create an ideal dataframe
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
.[1:20, ] %>%
rowwise() %>%
mutate(tte = foo(data = data, s = start, e = end, c = cam) ) %>%
ungroup()
#
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
.[1:15, ] %>%
rowwise() %>%
mutate(tte = foo(data = data, s = start, e = end, c = cam) ) %>%
ungroup()
#
idf
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
.[1:18, ] %>%
rowwise() %>%
mutate(tte = foo(data = data, s = start, e = end, c = cam) ) %>%
ungroup()
#
# Create an ideal dataframe
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
.[1:19, ] %>%
rowwise() %>%
mutate(tte = foo(data = data, s = start, e = end, c = cam) ) %>%
ungroup()
#
# Create an ideal dataframe
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) )
idf[19,]
tz(idf$start)
tz(idf$end)
any(data$cam == "AM174" & data$timeLST == idf$start[19])
any(data$cam == "AM174" & data$timeLST == idf$start[1])
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
.[19:21, ] %>%
rowwise() %>%
mutate(tte = foo(data = data, s = start, e = end, c = cam) ) %>%
ungroup()
idf
# Create an ideal dataframe
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
.[1:21, ] %>%
rowwise() %>%
mutate(tte = foo(data = data, s = start, e = end, c = cam) ) %>%
ungroup()
#
df
df %>% filter(x == 4)
df %>% filter(x == 4) %>%
summarise(y = min(y))
df %>% filter(x == 4) %>% %>% summarise(y = min(y))
df %>% filter(x == 4) %>%summarise(y = min(y))
tst <- df %>% filter(x == 4) %>%summarise(y = min(y))
tst
length(tst)
dim(tst)
# Create an ideal dataframe
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
.[1:18, ] %>%
rowwise() %>%
mutate(tte = foo(data = data, s = start, e = end, c = cam) ) %>%
ungroup()
idf
table(idf$tte)
is.na(idf$tte)
foo <- function(data, s, e, c){
# Returns a summarised vector corresponding to a range of dates
# Takes: weather dataframe (must include date column and some covariate column)
#    weathercol = the covariate column in weatherdata you want to summarise
#    fn = what summarise function you want to do (eg. mean, max...) (not in quotes)
#    s & e = the range of dates you want to summarise, should be of class Date
#    c = cam (from dataset row)
out <- data %>%
filter(between(timeLST, s, e),
cam == c) %>%
# Apply fn to weathercol
summarise(new = min(timeLST) ) %>%
#     mutate(new = ifelse(length(.$new) == 0, NA, new)) %>%
# This returns the column as a vector
.$new
return(out)
}
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
.[1:21, ] %>% # Works if it starts or ends with NAs, can't transition between them...
rowwise() %>%
mutate(tte = foo(data = data, s = start, e = end, c = cam) ) %>%
ungroup()
#
idf
s <- idf$start[1]
e <- idf$end[1]
c <- idf$cam[1]
out <- data %>%
filter(between(timeLST, s, e),
cam == c)
out
length(out$timeLST)
out <- data %>%
filter(between(timeLST, s, e),
cam == c) %>%
# Apply fn to weathercol
if(length(.$timeLST) == 1){
mutate(new = NA)
}
headout
head(out)
head(ttfe)
idf <- expand.grid(start = start,
cam = unique(data$cam)) %>%
mutate(end = start + seconds(per) ) %>%
.[5:10, ] %>% # Works if it starts or ends with NAs, can't transition between them...
rowwise() %>%
mutate(tte = foo(data = data, s = start, e = end, c = cam) ) %>%
ungroup()
idf
df <- data.frame(plot = c(1,1,1,1), cam =c(1,1,2,2), timetoevent = c(NA, 2, 3, NA), censortime = 5)
df
167.09/3
79.97/3
79.97/3+15
.99+.99+2.75+1.99+2.79+.88+3.99+2.49+4.09+5.59+4.39+5.99+1.29+.32+1.5+1.75+1.71+.99+3.99+2.95+3.99+4.99+3.38
(.99+.99+2.75+1.99+2.79+.88+3.99+2.49+4.09+5.59+4.39+5.99+1.29+.32+1.5+1.75+1.71+.99+3.99+2.95+3.99+4.99+3.38)/3
.99+.99+2.75+1.99+2.79+.88+3.99+2.49+4.09+5.59+4.39+5.99+1.29+.32+1.5+1.75+1.71+.99+3.99+2.95+3.99+4.99+3.38 + 30
.99+.99+2.75+1.99+2.79+.88+3.99+2.49+4.09+5.59+4.39+5.99+1.29+.32+1.5+1.75+1.71+.99+3.99+2.95+3.99+4.99+3.38 + 60
(.99+.99+2.75+1.99+2.79+.88+3.99+2.49+4.09+5.59+4.39+5.99+1.29+.32+1.5+1.75+1.71+.99+3.99+2.95+3.99+4.99+3.38 + 60)/3
11.26+8.49
11.26+8.49+41.26
11.26+8.49+41.26+41.26
11.26+41.26+41.26
89*.5
44.5*.8
482+96
load("/Users/annamoeller/GitHub/School/purrr workshop/purrr_workshop/data/swapi.rda")
install.packages("mgcv")
225*.6
my.fn <- function(x){
x + 3
}
my.fn(5)
myfn(5)
my.fn(5)
# Object doesn't exist error
a <- c(1, 4, 6, 2, 6)
a + b
# Class mismatch error
b <- c("Anna", "Jenny", "Molly", "Kelsey")
a + b
# Punctuation errors
head(a))
c <- NULL
for(i in 1:length(a){
c[i] <- a[i] + 3
}
# Package overwriting
library(dplyr)
library(raster)
xx <- iris %>%
select(Sepal.Length, Species)
library(raster)
install.packages("raster")
library(raster)
xx <- iris %>%
select(Sepal.Length, Species)
?stopifnot
my.fn <- function(x){
# x must be numeric
stopifnot(is.numeric(x))
x + 5
}
my.fn(3)
my.fn(c(1, 1, 23, ))
my.fn(c(1, 1, 23, 4))
my.fn(c(1, 1, 23, 4, "b"))
my.fn <- function(x){
# x must be numeric
stop(!is.numeric(x))
x + 5
}
my.fn(c(1, 1, 23, 4, "b"))
my.fn(c(1, 1, 23, 4))
# With stop, you can create your own error message
my.fn <- function(x){
# x must be numeric
if(!is.numeric(x)){
stop("x isn't a number, idiot!")
}
x + 5
}
my.fn(c(1, 1, 23, 4))
my.fn(c(1, 1, 23, 4, "b"))
?try
iter <- 12
try(if(iter > 10) stop("too many iterations"))
iter <- 12
if(iter > 10) stop("too many iterations")
try
my.fn(5)
# Object doesn't exist error
a <- c(1, 4, 6, 2, 6)
a + b
# Object doesn't exist error
a <- c(1, 4, 6, 2, 6)
a + b
my.fn(5)
my.fn <- function(x){
x + 3
}
my.fn(x)
?warning
testit <- function() warning("testit")
testit()
testit <- function() warning("problem in testit", call. = FALSE)
testit()
suppressWarnings(warning("testit"))
testit()
warning("this is just for funsies")
# Try creating a warning
my.fn <- function(x){
warning("this is just for funsies")
x + 5
}
my.fn(3)
# Most common R errors
# http://blog.revolutionanalytics.com/2015/03/the-most-common-r-error-messages.html
# "could not find function" errors: usually caused by ______ and _______
# "Error in if" errors, caused by non-logical data or missing values passed to R's "if" conditional statement
# "Error in eval"/object not found errors, usually caused by _______ and ________
# "cannot open" errors, usually caused by _______
read.csv("/Users/annamoeller/GitHub/RGroup/tidyverse/R_group_formatting")
# Most common R errors
# http://blog.revolutionanalytics.com/2015/03/the-most-common-r-error-messages.html
# "could not find function" errors: usually caused by ______ and _______
# "Error in if" errors, caused by non-logical data or missing values passed to R's "if" conditional statement
# "Error in eval"/object not found errors, usually caused by _______ and ________
# "cannot open" errors, usually caused by _______
read.csv("/Users/annamoeller/GitHub/RGroup/tidyverse/R_group_formatting.csv")
# Set working directory
setwd("/Users/annamoeller/GitHub/RGroup")
?read.csv
# Most common R errors
# http://blog.revolutionanalytics.com/2015/03/the-most-common-r-error-messages.html
# "could not find function" errors: usually caused by ______ and _______
# "Error in if" errors, caused by non-logical data or missing values passed to R's "if" conditional statement
# "Error in eval"/object not found errors, usually caused by _______ and ________
# "cannot open" errors, usually caused by _______
read.csv("tidyverse/R_group_formatting")
# assertthat
# https://github.com/hadley/assertthat
library(assertthat)
assert_that(x = 3)
assert_that(x == 3)
x<-2
assert_that(x == 3)
assert_that(are_equal(x, 3))
assert_that(are_equal(x, 2))
my.fn <- function(x){
assert_that(is.numeric(x))
x + 5
}
my.fn("b")
my.fn <- function(x){
# assert_that(is.numeric(x))
see_if(is.numeric(x))
x + 5
}
my.fn("b")
# assert_that(is.numeric(x))
see_if(is.numeric(x))
x<- "cvlkj"
# assert_that(is.numeric(x))
see_if(is.numeric(x))
# assert_that(is.numeric(x))
# see_if(is.numeric(x))
validate_that(is.numeric(x))
assert_that(is.numeric(x))
x <- "RGroup"
assert_that(is.numeric(x))
tst <- assert_that(is.numeric(x))
class(tst)
tst <- see_if(is.numeric(x))
class(tst)
tst
tst <- validate_that(is.numeric(x))
class(tst)
tst
